---
- name: Install cryptography python3 module
  ansible.builtin.apt:
    name: python3-cryptography
    state: present

- name: Create let's encrypt dir(s)
  ansible.builtin.file:
    path: "{{ acme_dns_letsencrypt_base_path }}/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rw,g=,o=
  loop: ["account", "keys", "csrs", "certs"]

- name: Generate account private key
  community.crypto.openssl_privatekey:
    path: "{{ acme_dns_letsencrypt_dirs.account }}/account.key"
    type: RSA
    size: 4096

- name: Generate domain private key
  community.crypto.openssl_privatekey:
    path: "{{ acme_dns_letsencrypt_dirs.mykeys }}/{{ item.fqdn }}.key"
    type: RSA
    size: 4096
  loop: "{{ grp_acme_dns_domain_name }}"

- name: Generate an OpenSSL Certificate Signing Request
  community.crypto.openssl_csr:
    path: "{{ acme_dns_letsencrypt_dirs.csrs }}/{{ item.fqdn }}.csr"
    privatekey_path: "{{ acme_dns_letsencrypt_dirs.mykeys }}/{{ item.fqdn }}.key"
    common_name: "{{ item.fqdn }}"
  loop: "{{ grp_acme_dns_domain_name }}"

- name: "Start Let's Encrypt dns-01 challenge(s)"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_dns_directory }}"
    acme_version: "{{ acme_dns_version }}"
    account_key_src: "{{ acme_dns_letsencrypt_dirs.account }}/account.key"
    account_email: "{{ acme_dns_email }}"
    challenge: "{{ acme_dns_challenge_type }}"
    csr: "{{ acme_dns_letsencrypt_dirs.csrs }}/{{ item.fqdn }}.csr"
    dest: "{{ acme_dns_letsencrypt_dirs.certs }}/{{ item.fqdn }}.crt"
    remaining_days: 60
    terms_agreed: 1
  register: "acme_dns_challenge_result"
  loop: "{{ grp_acme_dns_domain_name }}"

- name: Call Gandi LiveDNS API to register the TXT record
  community.general.gandi_livedns:
    domain: "{{ grp_domain_name }}"
    record: "{{ acme_dns_challenge_result.results[item_index]['challenge_data'][item.fqdn]['dns-01'].record | regex_replace(item.domain, '') }}"
    type: TXT
    values:
    - "{{ acme_dns_challenge_result.results[item_index]['challenge_data'][item.fqdn]['dns-01'].resource_value }}"
    ttl: 300
    api_key: "{{ grp_gandi_api_key }}"
    state: present
  loop: "{{ grp_acme_dns_domain_name }}"
  loop_control:
    index_var: item_index
  when:
    - acme_dns_challenge_result['results'][item_index]['challenge_data'] is defined
    - acme_dns_challenge_result['results'][item_index]['challenge_data']

- name: "Complete Let's Encrypt dns-01 challenge(s)"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_dns_directory }}"
    acme_version: "{{ acme_dns_version }}"
    account_key_src: "{{ acme_dns_letsencrypt_dirs.account }}/account.key"
    account_email: "{{ acme_dns_email }}"
    challenge: "{{ acme_dns_challenge_type }}"
    csr: "{{ acme_dns_letsencrypt_dirs.csrs }}/{{ item.fqdn }}.csr"
    dest: "{{ acme_dns_letsencrypt_dirs.certs }}/{{ item.fqdn }}.crt"
    fullchain_dest: "{{ acme_dns_letsencrypt_dirs.certs }}/fullchain.{{ item.fqdn }}.crt"
    data: "{{ acme_dns_challenge_result['results'][item_index] }}"
    force: yes # Does not always renew, it will be forced when let's encrypt cert_days < remaining_days then will write the new certificates
  loop: "{{ grp_acme_dns_domain_name }}"
  loop_control:
    index_var: item_index
  when:
    - acme_dns_challenge_result['results'][item_index]['challenge_data'] is defined
    - acme_dns_challenge_result['results'][item_index]['challenge_data']
  notify: Reload haproxy service

- name: Call Gandi LiveDNS API to delete the TXT record
  community.general.gandi_livedns:
    domain: "{{ grp_domain_name }}"
    record: "{{ acme_dns_challenge_result.results[item_index]['challenge_data'][item.fqdn]['dns-01'].record | regex_replace(item.domain, '') }}"
    type: TXT
    api_key: "{{ grp_gandi_api_key }}"
    state: absent
  loop: "{{ grp_acme_dns_domain_name }}"
  loop_control:
    index_var: item_index
  when:
    - acme_dns_challenge_result['results'][item_index]['challenge_data'] is defined
    - acme_dns_challenge_result['results'][item_index]['challenge_data']

- name: Create symlink for haproxy's fullchain certs
  ansible.builtin.file:
    src: "{{ acme_dns_letsencrypt_base_path }}/certs/fullchain.{{ item.fqdn }}.crt"
    dest: "/etc/haproxy/ssl/{{ item.fqdn }}.pem"
    owner: root
    group: root
    state: link
    mode: u=rw,g=,o=
  loop: "{{ grp_acme_dns_domain_name }}"

- name: Create symlink for haproxy's privkey
  ansible.builtin.file:
    src: "{{ acme_dns_letsencrypt_base_path }}/keys/{{ item.fqdn }}.key"
    dest: "/etc/haproxy/ssl/{{ item.fqdn }}.pem.key"
    owner: root
    group: root
    state: link
    mode: u=rw,g=,o=
  loop: "{{ grp_acme_dns_domain_name }}"

- name: debug
  debug:
    msg: "{{ ansible_host }}"

- name: Import setup_auto_renew playbook
  include_tasks: setup_auto_renew.yml
  when:
    - acme_dns_setup_auto_renew
    - ansible_connection != "local"
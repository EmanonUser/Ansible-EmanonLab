---
- name: Remove debian stable repository
  ansible.builtin.apt_repository:
    repo: "{{ item }}"
    state: absent
  loop:
    - deb http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main
    - deb-src http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main

- name: Add debian contrib stable repository for OpenZFS
  ansible.builtin.apt_repository:
    repo: deb http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main contrib
    filename: "{{ ansible_distribution_release  }}-contrib"
    state: present

- name: Install ZFS packages
  ansible.builtin.apt:
    name: [dpkg-dev, linux-headers-amd64, zfs-dkms, zfsutils-linux]
    update_cache: yes
    state: present

- name: Configure ZFS dkms kernel module
  ansible.builtin.template:
    src: zfs.conf.j2
    dest: /etc/modprobe.d/zfs.conf
    owner: root
    group: root
    mode: u=rw,g=,o=

- name: Load ZFS kernel module
  community.general.modprobe:
    name: zfs
    state: present

- name: Configure automatic zpool scrubing
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /etc/systemd/system/{{ item }}
    owner: root
    group: root
    mode: u=rw,g=,o=
  loop: [zpool-scrub@.service, zpool-scrub@.timer]
  notify:
    - Daemon-reload zfs systemd
    - Enable zpool(s)-scrub timer(s)
    - Start zpool(s)-scrub timer(s)
    - Restart zpool(s)-scrub timer(s)

- name: Configure automatic mount of encrypted datasets
  ansible.builtin.template:
    src: "zfs-mount-encrypted.service.j2"
    dest: /etc/systemd/system/zfs-mount-encrypted.service
    owner: root
    group: root
    mode: u=rw,g=,o=
  notify: Enable zfs-mount-encrypted service

# - name: Create ZFS dataset encryption key(s)
#   ansible.builtin.shell:
#     chdir: /root
#     executable: /bin/bash
#     creates: "{{ item }}.key"
#     cmd: openssl rand -hex 32 | tr '[:lower:]' '[:upper:]' > {{ item }}.key 
#   loop: [one, two]

# - name: Set permissions for dataset encryption key(s)
#   ansible.builtin.file:
#     path: /root/{{ item }}.key
#     owner: root
#     group: root
#     mode: u=r,g=,o=
#     state: file
#   loop: [one, two]

# - name: Create ZFS dataset(s)
#   community.general.zfs:
#     name: tank/{{ item }}
#     state: present
#     extra_zfs_properties:
#       compression: lz4
#       encryption: aes-256-gcm
#       keyformat: hex
#       keylocation: file:///root/{{ item }}.key
#       atime: off
#       aclmode: passthrough
#       acltype: posix
#       dnodesize: auto
#   loop: [one, two]
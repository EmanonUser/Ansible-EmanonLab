---
- name: Remove debian stable repository
  ansible.builtin.apt_repository:
    repo: "{{ item }}"
    state: absent
  loop:
    - deb http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main
    - deb-src http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main

- name: Add debian contrib stable repository for OpenZFS
  ansible.builtin.apt_repository:
    repo: deb http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main contrib
    filename: "{{ ansible_distribution_release  }}-contrib"
    state: present

- name: Install ZFS packages
  ansible.builtin.apt:
    name: [dpkg-dev, linux-headers-amd64, zfs-dkms, zfsutils-linux]
    update_cache: yes
    state: present

- name: Configure ZFS dkms kernel module
  ansible.builtin.template:
    src: zfs.conf.j2
    dest: /etc/modprobe.d/zfs.conf
    owner: root
    group: root
    mode: u=rw,g=,o=

- name: Load ZFS kernel module
  community.general.modprobe:
    name: zfs
    state: present

- name: Pause create zpool(s) manually, too sensitive to automate it without a proper module
  ansible.builtin.pause:
    prompt: zpool create ZPOOL_NAME mirror/raidz/raidz1 -o ashift=12
  when: zfs_manual_zpools_creation

- name: Configure automatic zpool scrubing
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /etc/systemd/system/{{ item }}
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  loop: [zpool-scrub@.service, zpool-scrub@.timer]
  notify:
    - Daemon-reload zfs systemd
    - Enable zpool(s)-scrub timer(s)
    - Start zpool(s)-scrub timer(s)
    - Restart zpool(s)-scrub timer(s)

- name: Configure automatic zpool triming
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /etc/systemd/system/{{ item }}
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  loop: [zpool-trim@.service, zpool-trim@.timer]
  notify:
    - Daemon-reload zfs systemd
    - Enable zpool(s)-trim timer(s)
    - Start zpool(s)-trim timer(s)
    - Restart zpool(s)-trim timer(s)

- name: Configure automatic loading of encryption keys
  ansible.builtin.template:
    src: "zfs-load-keys.service.j2"
    dest: /etc/systemd/system/zfs-load-keys.service
    owner: root
    group: root
    mode: u=rw,g=,o=
  notify: Enable zfs-load-keys service

- name: Configure automatic mounting of encrypted datasets
  ansible.builtin.template:
    src: "zfs-mount-encrypted-datasets.service.j2"
    dest: /etc/systemd/system/zfs-mount-encrypted-datasets.service
    owner: root
    group: root
    mode: u=rw,g=,o=
  notify: Enable zfs-mount-encrypted-datasets service

- name: Delete default cron scrub timer
  ansible.builtin.file:
    path: /etc/cron.d/zfsutils-linux
    state: absent

- name: Create dir for ZFS dataset encryption key(s)
  ansible.builtin.file:
    path: "{{ zfs_datasets_keylocation }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Create dir for ZFS volumes encryption key(s)
  ansible.builtin.file:
    path: "{{ zfs_volumes_keylocation }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=

- name: Create ZFS dataset encryption key(s)
  ansible.builtin.shell:
    creates: "{{ zfs_datasets_keylocation }}/{{ item.1.dataset }}.key"
    cmd: openssl rand -hex 32 | tr '[:lower:]' '[:upper:]' > {{ zfs_datasets_keylocation }}/{{ item.1.dataset }}.key
  loop: "{{ zfs_pools | subelements('datasets', skip_missing=true) }}"
  loop_control:
    label: "ZFS dataset: {{ item.0.pool }}/{{ item.1.dataset | regex_replace('-', '/') }}"

- name: Create ZFS volume encryption key(s)
  ansible.builtin.shell:
    creates: "{{ zfs_volumes_keylocation }}/{{ item.1.volume }}.key"
    cmd: openssl rand -hex 32 | tr '[:lower:]' '[:upper:]' > {{ zfs_volumes_keylocation }}/{{ item.1.volume }}.key
  loop: "{{ zfs_pools | subelements('volumes', skip_missing=true) }}"
  loop_control:
    label: "ZFS volume: {{ item.0.pool }}/{{ item.1.volume }}"

- name: Set permissions and imutability for dataset encryption key(s)
  ansible.builtin.file:
    path: "{{ zfs_datasets_keylocation }}/{{ item.1.dataset }}.key"
    owner: root
    group: root
    mode: u=r,g=,o=
    attributes: ie
    state: file
  loop: "{{ zfs_pools | subelements('datasets', skip_missing=true) }}"
  loop_control:
    label: "ZFS dataset: {{ item.0.pool }}/{{ item.1.dataset | regex_replace('-', '/') }}"

- name: Set permissions and imutability for volume encryption key(s)
  ansible.builtin.file:
    path: "{{ zfs_volumes_keylocation }}/{{ item.1.volume }}.key"
    owner: root
    group: root
    mode: u=r,g=,o=
    attributes: ie
    state: file
  loop: "{{ zfs_pools | subelements('volumes', skip_missing=true) }}"
  loop_control:
    label: "ZFS volume: {{ item.0.pool }}/{{ item.1.volume }}"

- name: Create ZFS dataset(s)
  community.general.zfs:
    name: "{{ item.0.pool }}/{{ item.1.dataset | regex_replace('-', '/') }}"
    state: present
    extra_zfs_properties:
      compression: "{{ item.1.compression | default('lz4') }}"
      encryption: "{{ item.1.encryption | default('aes-256-gcm') }}"
      keyformat: "{{ item.1.keyformat | default('hex') }}"
      keylocation: "{{ item.1.keylocation | default('file://' + zfs_datasets_keylocation + '/' + item.1.dataset + '.key' ) }}"
      snapdir: "{{ item.1.snapdir | default('hidden') }}"
      atime: "{{ item.1.atime | default('off') }}"
      relatime: "{{ item.1.relatime | default('off') }}"
      aclmode: "{{ item.1.aclmode | default('passthrough') }}"
      acltype: "{{ item.1.acltype | default('posix') }}"
      xattr: "{{ item.1.xattr | default('sa') }}"
      recordsize: "{{ item.1.recordsize | default('128k') }}"
      dnodesize: "{{ item.1.dnodesize | default('auto') }}"
      mountpoint: "{{ item.1.mountpoint | default(omit) }}"
  loop: "{{ zfs_pools | subelements('datasets', skip_missing=true) }}"
  loop_control:
    label: "ZFS dataset: {{ item.0.pool }}/{{ item.1.dataset | regex_replace('-', '/') }}"

- name: Create ZFS volume(s)
  community.general.zfs:
    name: "{{ item.0.pool }}/{{ item.1.volume | regex_replace('-', '/') }}"
    state: present
    extra_zfs_properties:
      compression: "{{ item.1.compression | default('lz4') }}"
      encryption: "{{ item.1.encryption | default('aes-256-gcm') }}"
      keyformat: "{{ item.1.keyformat | default('hex') }}"
      keylocation: "{{ item.1.keylocation | default('file://' + zfs_volumes_keylocation + '/' + item.1.volume + '.key' ) }}"
      volsize: "{{ item.1.volsize }}"
      volmode: "{{ item.1.volmode | default('full') }}"
      snapdev: "{{ item.1.snapdev | default('hidden') }}"
  loop: "{{ zfs_pools | subelements('volumes', skip_missing=true) }}"
  loop_control:
    label: "ZFS volume: {{ item.0.pool }}/{{ item.1.volume | regex_replace('-', '/') }}"

# - name: Set ZFS datatsets base permissions
#   ansible.builtin.file:
#     path: >-
#           {% if item.1.mountpoint is not defined %}{{ item.0.base_path }}/{{ item.1.dataset | regex_replace('-', '/') -}}
#           {% elif item.1.mountpoint is defined %}{{ item.1.mountpoint }}{% endif %}
#     owner: "{{ primary_user_username }}"
#     group: "{{ primary_user_username }}"
#     mode: u=rwx,g=,o=
#   loop: "{{ zfs_pools | subelements('datasets', skip_missing=true) }}"
#   loop_control:
#     label: "ZFS dataset: {{ item.0.pool }}/{{ item.1.dataset | regex_replace('-', '/') }}"

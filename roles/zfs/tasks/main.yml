---
- name: Remove debian stable repository
  ansible.builtin.apt_repository:
    repo: "{{ item }}"
    state: absent
  loop:
    - deb http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main
    - deb-src http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main

- name: Add debian contrib stable repository for OpenZFS
  ansible.builtin.apt_repository:
    repo: deb http://deb.debian.org/debian/ {{ ansible_distribution_release  }} main contrib
    filename: "{{ ansible_distribution_release  }}-contrib"
    state: present

- name: Install ZFS packages
  ansible.builtin.apt:
    name: [dpkg-dev, linux-headers-amd64, zfs-dkms, zfsutils-linux]
    update_cache: yes
    state: present

- name: Configure ZFS dkms kernel module
  ansible.builtin.template:
    src: zfs.conf.j2
    dest: /etc/modprobe.d/zfs.conf
    owner: root
    group: root
    mode: u=rw,g=,o=

- name: Load ZFS kernel module
  community.general.modprobe:
    name: zfs
    state: present

- name: Pause create zpool(s) manually, too sensitive to automate it without a proper module
  ansible.builtin.pause:
    prompt: zpool create ZPOOL_NAME mirror/raidz/raidz1 -o ashift=12
  when: zfs_manual_zpools_creation

- name: Configure automatic zpool scrubing
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /etc/systemd/system/{{ item }}
    owner: root
    group: root
    mode: u=rw,g=,o=
  loop: [zpool-scrub@.service, zpool-scrub@.timer]
  notify:
    - Daemon-reload zfs systemd
    - Enable zpool(s)-scrub timer(s)
    - Start zpool(s)-scrub timer(s)
    - Restart zpool(s)-scrub timer(s)

- name: Create dir for ZFS dataset encryption key(s)
  ansible.builtin.file:
    path: "{{ zfs_datasets_keylocation }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=,o=  

- name: Create ZFS dataset encryption key(s)
  ansible.builtin.shell:
    creates: "{{ zfs_datasets_keylocation }}/{{ item.1.dataset }}.key"
    cmd: openssl rand -hex 32 | tr '[:lower:]' '[:upper:]' > {{ zfs_datasets_keylocation }}/{{ item.1.dataset }}.key
  loop: "{{ zfs_pools | subelements('datasets') }}"
  loop_control:
    label: "ZFS dataset: {{ item.0.pool }}/{{ item.1.dataset }}"

- name: Set permissions for dataset encryption key(s)
  ansible.builtin.file:
    path: "{{ zfs_datasets_keylocation }}/{{ item.1.dataset }}.key"
    owner: root
    group: root
    mode: u=r,g=,o=
    state: file
  loop: "{{ zfs_pools | subelements('datasets') }}"
  loop_control:
    label: "ZFS dataset: {{ item.0.pool }}/{{ item.1.dataset }}"

- name: Create ZFS dataset(s)
  community.general.zfs:
    name: "{{ item.0.pool }}/{{ item.1.dataset }}"
    state: present
    extra_zfs_properties:
      compression: "{{ item.1.compression }}"
      encryption: aes-256-gcm
      keyformat: hex
      keylocation: file://{{ zfs_datasets_keylocation }}/{{ item.1.dataset }}.key
      atime: off
      relatime: off
      aclmode: passthrough
      acltype: posix
      dnodesize: auto
      xattr: sa
  loop: "{{ zfs_pools | subelements('datasets') }}"
  loop_control:
    label: "ZFS dataset: {{ item.0.pool }}/{{ item.1.dataset }}"
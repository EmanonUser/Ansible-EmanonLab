global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	timeout connect 10s
	timeout client  30s
	timeout server  30s
	maxconn 2000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend main-frontend
	bind :::80 interface {{ ansible_default_ipv4.interface }}
	bind :::443 interface {{ ansible_default_ipv4.interface }} ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1
	http-response set-header X-Frame-Options SAMEORIGIN
	http-response set-header X-XSS-Protection "1;mode=block"
	http-response set-header Referrer-Policy "no-referrer,same-origin,strict-origin,strict-origin-when-cross-origin"
	http-response set-header X-Content-Type-Options nosniff
	http-response set-header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload;"
	http-request deny if HTTP_1.0

{% for service, value in grp_podman_networking.items() %}
{% if value.public %}
use_backend {{ service }}-backend if { hdr(host) -i {{ value.fulldomain }} }
{% endif %}
{% endfor %}
use_backend emanon-backend if { hdr(host) -i emanon.moe }

{% for service, value in grp_podman_networking.items() %}
{% if value.public %}
backend {{ service }}-backend
	server srv localhost:{{ value.webui_port }} check maxconn 30

{% endif %}
{% endfor %}

backend emanon-backend
	server srv localhost:9999 check maxconn 30

{% if haproxy_stats %}
frontend stats
	bind :::8404 interface {{ ansible_lo.device }}
	stats enable
	stats uri /
	stats refresh 10s
	stats admin if LOCALHOST
{% endif %}
---
- name: Update base core packages for debian
  ansible.builtin.apt:
    update_cache: yes
    upgrade: yes

- name: Install base core packages for debian
  ansible.builtin.apt:
    name: "{{ debian_stable_packages }}"
    state: present

- name: Set root password
  ansible.builtin.user:
    name: root
    comment: Password updated by ansible
    password: "{{ root_user_password | password_hash('sha512', root_user_password_salt) }}"
    state: present

- name: Add primary user
  ansible.builtin.user:
    name: "{{ primary_user_username }}"
    create_home: yes
    shell: /usr/bin/zsh
    comment: Primary user created by Ansible
    password: "{{ primary_user_password | password_hash('sha512', primary_user_password_salt) }}"
    state: present

- name: Create SSH dir for primary user
  ansible.builtin.file:
    path: /home/{{ primary_user_username }}/.ssh/
    owner: "{{ primary_user_username }}"
    group: "{{ primary_user_username }}"
    mode: u=rwx,g=,o=
    state: directory

- name: Add SSH key to primary user
  ansible.posix.authorized_key:
    user: "{{ primary_user_username }}"
    key: "{{ grp_primary_user_ssh_pubkey }}"
    state: present

- name: Enable SSH PubkeyAuthentication
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#PubkeyAuthentication|^PubkeyAuthentication"
    line: PubkeyAuthentication yes
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    state: present
    validate: /usr/sbin/sshd -tf %s
  notify: Restart ssh service

- name: Disable SSH PasswordAuthentication
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#PasswordAuthentication|^PasswordAuthentication"
    line: PasswordAuthentication no
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    state: present
    validate: /usr/sbin/sshd -tf %s
  notify: Restart ssh service

- name: Add primary user to sudoers
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    line: "{{ primary_user_username }} ALL=(ALL:ALL) ALL"
    state: present
    validate: /usr/sbin/visudo -cf %s

- name: Set system-wide umask
  ansible.builtin.lineinfile:
    line: umask 0077
    path: /etc/zsh/zprofile
    create: yes
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: Set zsh for root
  ansible.builtin.user:
    user: root
    shell: /usr/bin/zsh
  when: use_starship

- name: Configure .zshrc for primary user and root
  ansible.builtin.copy:
    src: "zshrc{% if use_starship %}_starship{% endif %}"
    dest: "{{ item.path }}"
    owner: "{{ item.user }}"
    group: "{{ item.user }}"
    mode: u=rw,g=,o=
  loop:
    - { path: "/home/{{ primary_user_username }}/.zshrc", user: "{{ primary_user_username }}" }
    - { path: "/root/.zshrc", user: "root" }
  when: use_starship

- name: Fetch zsh-autosuggestions plugin from github
  ansible.builtin.git:
    repo: "https://github.com/zsh-users/zsh-autosuggestions.git"
    dest: "{{ item }}"
    umask: "022"
  loop:
    - "/home/{{ primary_user_username }}/.zsh/zsh-autosuggestions"
    - "/root/.zsh/zsh-autosuggestions"

- name: Fetch zsh history-search-multi-word plugin from github
  ansible.builtin.git:
    repo: "https://github.com/z-shell/history-search-multi-word"
    dest: "{{ item }}"
    umask: "022"
  loop:
    - "/home/{{ primary_user_username }}/.zsh/history-search-multi-word"
    - "/root/.zsh/history-search-multi-word"

- name: Fetch zsh-completions plugin from github
  ansible.builtin.git:
    repo: "https://github.com/zsh-users/zsh-completions"
    dest: "{{ item }}"
    umask: "022"
  loop:
    - "/home/{{ primary_user_username }}/.zsh/zsh-completions"
    - "/root/.zsh/zsh-completions"

- name: Create .config/nvim dir(s) for primary user and root
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ item.user }}"
    group: "{{ item.user }}"
    mode: u=rwx,g=,o=
    state: directory
  loop:
    - { path: "/home/{{ primary_user_username }}/.config/nvim", user: "{{ primary_user_username }}" }
    - { path: "/root/.config/nvim", user: "root" }

- name: Configure neovim
  ansible.builtin.copy:
    src: neovim_init.vim
    dest: "{{ item.path }}"
    owner: "{{ item.user }}"
    group: "{{ item.user }}"
    mode: u=rw,g=,o=
  loop:
    - { path: "/home/{{  primary_user_username }}/.config/nvim/init.vim", user: "{{ primary_user_username }}" }
    - { path: "/root/.config/nvim/init.vim", user: "root" }

- name: Disable laptop lid suspend
  ansible.builtin.lineinfile:
    path: /etc/systemd/logind.conf
    regexp: HandleLidSwitch=
    line: HandleLidSwitch=ignore
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  when: inventory_hostname == 'laptop'
  notify: Restart systemd-logind service
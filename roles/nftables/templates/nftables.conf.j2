#!/usr/sbin/nft -f

flush ruleset

define WAN = {{ WAN_interface_name }}
define LAN = {{ lacp_interface_name }}
define WG = {{ wireguard_interface_name }}

table ip routing {
	chain prerouting {
		type nat hook prerouting priority dstnat; policy accept
		iifname $WAN udp dport 2000 redirect to :{{ wireguard_server_port }} # Wiregard server DNAT
		iifname $WAN tcp dport 22000 dnat to {{ pi_ipv4_addr }}:22000 # Syncthing DNAT
		iifname $WAN tcp dport 8000 dnat to {{ arch_ipv4_addr }}:8000 # Temporary web server DNAT
		# NAT hairpinning iifname $LAN ip daddr {{ subdomain_name }}.{{ domain_name }} tcp dport 1234 dnat to {{ router_static_ip }}:7999
	}
	chain postrouting {
		type nat hook postrouting priority srcnat; policy accept
		oifname $WAN masquerade # WAN NAT
		# NAT hairpinning ip saddr 192.168.70.0/24 ip daddr {{ router_static_ip }} tcp dport 1234 masquerade
	}
}

table inet firewall {
	
	set RFC1918_3330v4 {
		type ipv4_addr
		counter
		flags interval
		elements = {
		10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 0.0.0.0/8, 14.0.0.0/8,
		24.0.0.0/8, 39.0.0.0/8, 127.0.0.0/8, 128.0.0.0/16, 169.254.0.0/16, 191.255.0.0/16,
		192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 198.18.0.0/15, 223.255.255.0/24,
		224.0.0.0/4, 240.0.0.0/4
		}
	}

	chain input_filter {
	    ct state invalid counter drop
	    iifname { "lo" } ip saddr != 127.0.0.0/8 counter drop
	}

	chain forward_filter {
	    ct state invalid counter drop
	    iifname $LAN oifname $WAN ip daddr @RFC1918_3330v4 counter reject with icmpx type admin-prohibited # Reject leaking of private ip address space from WAN
	}

	chain output_filter {
	    ct state invalid counter drop
	    oifname $WAN ip daddr @RFC1918_3330v4 counter reject with icmpx type admin-prohibited # Reject leaking of private ip address space from the router itself
	
	}

	chain input {
		type filter hook input priority filter; policy drop;
		jump input_filter
		icmp type echo-request icmp sequence {{ echo_request_count }} log level notice prefix "Lain Server isAlive Ping: " counter accept # isAlive echo-request from lain.emanon.moe
		ct state { established, related } counter accept
		iifname { "lo" } accept
		ip protocol icmp counter accept
		ip6 nexthdr icmpv6 counter accept
		iifname $LAN icmpv6 type { echo-request, nd-neighbor-solicit, nd-neighbor-advert } accept
		iifname $LAN icmpv6 type { nd-router-solicit, nd-router-advert, mld-listener-query } accept
		iifname $LAN ip saddr {{ brocade_ipv4_addr }} ip protocol ospf counter accept # Accept OSPFv2 from brocade
		iifname $LAN udp dport { 53, 67, 123 } counter accept # DNS server & DHCP server & NTP server for LAN
		iifname $LAN tcp dport { 9100, 9353 } counter accept # Prometheus Node exporter for LAN
		iifname $WG udp dport 53 counter accept # Accept DNS query from wireguard devices
		udp dport {{ wireguard_server_port }} ct state new log level notice prefix "New Wireguard connexion: " counter accept
		tcp dport ssh ct state new log level notice prefix "New SSH connexion: " counter accept
		# NAT Hairpinning tcp dport 7999 counter accept
	}
	chain forward {
		type filter hook forward priority filter; policy drop;
		ip saddr {{ arch_ipv4_addr }} ip daddr 192.168.1.1 counter accept # Accept from admin to FAI modem
		jump forward_filter
		ct state { established, related } counter accept
		iifname $WG counter accept # Wireguard Admin VPN to any
		iifname $LAN oifname $WAN counter accept # WAN traffic forwading
		iifname $WAN oifname $LAN ip daddr {{ pi_ipv4_addr }} tcp dport 22000 counter accept # Syncthing Port Forwarding
		iifname $WAN oifname $LAN ip daddr {{ arch_ipv4_addr }} tcp dport 8000 counter accept # Temporary web server Port Forwading
		
	}
	chain output {
		type filter hook output priority filter; policy drop;
		oifname $WAN ip daddr 192.168.1.1 counter accept # Don't Block SSH for ndd
		jump output_filter
		ct state { established, related, new } counter accept
	}
}
table ip sshguard {
	set attackers {
		type ipv4_addr
		flags interval
	}

	chain blacklist {
		type filter hook input priority filter - 10; policy accept;
		ip saddr @attackers drop
	}
}

table ip6 sshguard {
	set attackers {
		type ipv6_addr
		flags interval
	}

	chain blacklist {
		type filter hook input priority filter - 10; policy accept;
		ip6 saddr @attackers drop
	}
}
